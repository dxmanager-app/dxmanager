{
  "version": 3,
  "sources": ["../../@tauri-apps/api/helpers/os-check.js", "../../@tauri-apps/api/path.js"],
  "sourcesContent": ["// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction isWindows() {\n    return navigator.appVersion.includes('Win');\n}\n\nexport { isWindows };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\nimport { BaseDirectory } from './fs.js';\nimport { isWindows } from './helpers/os-check.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.path`](https://tauri.app/v1/api/config/#allowlistconfig.path) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"path\": {\n *         \"all\": true, // enable all Path APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Returns the path to the suggested directory for your app config files.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appConfigDir} or {@link appDataDir} instead.\n * @since 1.0.0\n */\nasync function appDir() {\n    return appConfigDir();\n}\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appConfigDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppConfig\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLocalDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLocalData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appCacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppCache\n        }\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function audioDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Audio\n        }\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function cacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Cache\n        }\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function configDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Config\n        }\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function dataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Data\n        }\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function desktopDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Desktop\n        }\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */\nasync function documentDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Document\n        }\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function downloadDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Download\n        }\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function executableDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Executable\n        }\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function fontDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Font\n        }\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function homeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Home\n        }\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function localDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.LocalData\n        }\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function pictureDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Picture\n        }\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function publicDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Public\n        }\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function resourceDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > tauri > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */\nasync function resolveResource(resourcePath) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: resourcePath,\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function runtimeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Runtime\n        }\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function templateDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Template\n        }\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function videoDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Video\n        }\n    });\n}\n/**\n * Returns the path to the suggested log directory.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appLogDir} instead.\n * @since 1.0.0\n */\nasync function logDir() {\n    return appLogDir();\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLogDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLog\n        }\n    });\n}\n/**\n * Provides the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 1.0.0\n */\nconst sep = isWindows() ? '\\\\' : '/';\n/**\n * Provides the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 1.0.0\n */\nconst delimiter = isWindows() ? ';' : ':';\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function resolve(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolve',\n            paths\n        }\n    });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function normalize(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'normalize',\n            path\n        }\n    });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function join(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'join',\n            paths\n        }\n    });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname } from '@tauri-apps/api/path';\n * const dir = await dirname('/path/to/somedir/');\n * assert(dir === 'somedir');\n * ```\n *\n * @since 1.0.0\n */\nasync function dirname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'dirname',\n            path\n        }\n    });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname } from '@tauri-apps/api/path';\n * const ext = await extname('/path/to/file.html');\n * assert(ext === 'html');\n * ```\n *\n * @since 1.0.0\n */\nasync function extname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'extname',\n            path\n        }\n    });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename } from '@tauri-apps/api/path';\n * const base = await basename('path/to/app.conf');\n * assert(base === 'app.conf');\n * ```\n *\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */\nasync function basename(path, ext) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'basename',\n            path,\n            ext\n        }\n    });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */\nasync function isAbsolute(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'isAbsolute',\n            path\n        }\n    });\n}\n\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, logDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, templateDir, videoDir };\n"],
  "mappings": "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",
  "names": []
}
